"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[128],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,s(s({ref:n},u),{},{components:t})):r.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9844:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:5},s="Middlewares",i={unversionedId:"Request/Middlewares",id:"Request/Middlewares",title:"Middlewares",description:"El hook useCleanFetching admite una serie de middlewares que se ejecutan junto con los cambios de estado y que se pueden ocupar a manera de callback para detectar esos cambios de manera no declarativa.",source:"@site/docs/Request/Middlewares.md",sourceDirName:"Request",slug:"/Request/Middlewares",permalink:"/rodlopez-clean-code/docs/Request/Middlewares",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Request/Middlewares.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"traceAsync",permalink:"/rodlopez-clean-code/docs/Request/traceAsync"},next:{title:"Customization",permalink:"/rodlopez-clean-code/docs/category/customization"}},l={},c=[],u={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"middlewares"},"Middlewares"),(0,o.kt)("p",null,"El hook ",(0,o.kt)("strong",{parentName:"p"},"useCleanFetching")," admite una serie de middlewares que se ejecutan junto con los cambios de estado y que se pueden ocupar a manera de callback para detectar esos cambios de manera no declarativa."),(0,o.kt)("p",null,"Todos estos son opcionales y se pueden ocupar de acuerdo a sus necesidades."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="RequestComponent.tsx"',title:'"RequestComponent.tsx"'},'import { useCleanFetching } from "@rodlopez/clean-code";\n\ninterface TypeOfResult {\n  name: string;\n  email: string;\n}\n\nconst RequestComponent = () => {\n  const state = useCleanFetching<TypeOfResult>({\n    // highlight-next-line\n    middlewares: {\n      init: () => {\n        console.log("Ejecuci\xf3n al iniciar la request")\n      },\n      success: (user: TypeOfResult) => {\n        console.log("Usuario obtenido", user)\n      },\n      error: (errorObject: string) => {\n        console.log(`Error en la request: ${errorObject}`)\n      },\n      reset: () => {\n        console.log("Se resete\xf3 el objeto a su estado inicial")\n      },\n    }\n  });\n  .\n  .\n  .\n  return <div>{state.data?.name}</div>;\n};\n')),(0,o.kt)("p",null,"Estos middlewareas tambien admiten arreglos"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="RequestComponent.tsx"',title:'"RequestComponent.tsx"'},'import { useCleanFetching } from "@rodlopez/clean-code";\n\ninterface TypeOfResult {\n  name: string;\n  email: string;\n}\n\nconst RequestComponent = () => {\n  const state = useCleanFetching<TypeOfResult>({\n    middlewares: {\n      // highlight-next-line\n      success: [\n        (user: TypeOfResult) => {\n          console.log("Usuario obtenido, primer middleware", user)\n        },\n        (user: TypeOfResult) => {\n          console.log("Usuario obtenido, segundo middleware", user)\n        },\n        (user: TypeOfResult) => {\n          console.log("Usuario obtenido, tercer middleware", user)\n        }\n        .\n        .\n        .\n      ],\n    }\n  });\n  .\n  .\n  .\n  return <div>{state.data?.name}</div>;\n};\n')))}p.isMDXComponent=!0}}]);